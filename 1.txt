import unittest


class TestStringMethods(unittest.TestCase):
    def test_correct_db(self):
        expected = {
            "object": "database",
            "id": "8ebce70a-b01d-4b36-a26b-0b83d07a4cdd",
            "cover": None,
            "icon": None,
            "created_time": "2022-02-12T17:45:00.000Z",
            "last_edited_time": "2022-02-12T17:46:00.000Z",
            "title": [],
            "properties": {
                "Tags": {
                    "id": "Yq><",
                    "name": "Tags",
                    "type": "multi_select",
                    "multi_select": {"options": []},
                },
                "qw": {"id": "title", "name": "qw", "type": "title", "title": {}},
            },
            "parent": {
                "type": "page_id",
                "page_id": "1a30571c-ac24-4510-b001-3c0ef7543a25",
            },
            "url": "https://www.notion.so/8ebce70ab01d4b36a26b0b83d07a4cdd",
        }
        actual = readDB(database_id, headers)
        self.assertEqual(actual, expected)

    def test_invalid_id_db(self):
        actual = readDB("invalid_id", headers)
        expected = {
            "object": "error",
            "status": 400,
            "code": "validation_error",
            "message": 'path failed validation: path.database_id should be a valid uuid, instead was `"invalid_id"`.',
        }
        self.assertEqual(actual, expected)

    def test_invalid_headers_db(self):
        actual = readDB(database_id, "invalid_headers")
        expected = "Error while fetching a block..."
        print(expected)
        self.assertEqual(actual, expected)




token_v2 "d0afc93e6c403df8d1da462215d6b3639f11491188212242a61ae86998bc7f8cbb9fd02e83eb77bc999ab8e3ecd63a73f528e6e85870a0fcd96c173dd42587c82794e54d60924a95f5bbdd636dcd"
url https://www.notion.so/2-2-14217e1dfbc7478fb5cc5e5580d0a952